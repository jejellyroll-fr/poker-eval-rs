<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="661.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="661.00"> </text><svg id="frames" x="10" width="1180" total_samples="16840"><g><title>perf-exec (7 samples, 0.04%)</title><rect x="0.0000%" y="613" width="0.0416%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="7"/><text x="0.2500%" y="623.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="0.0000%" y="597" width="0.0416%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="7"/><text x="0.2500%" y="607.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="0.0000%" y="581" width="0.0416%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="7"/><text x="0.2500%" y="591.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="0.0000%" y="565" width="0.0416%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="7"/><text x="0.2500%" y="575.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="0.0000%" y="549" width="0.0416%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="7"/><text x="0.2500%" y="559.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="0.0000%" y="533" width="0.0416%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="7"/><text x="0.2500%" y="543.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="0.0000%" y="517" width="0.0416%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="7"/><text x="0.2500%" y="527.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="0.0000%" y="501" width="0.0416%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="7"/><text x="0.2500%" y="511.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="0.0000%" y="485" width="0.0416%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="7"/><text x="0.2500%" y="495.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="0.0000%" y="469" width="0.0416%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="7"/><text x="0.2500%" y="479.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="0.0000%" y="453" width="0.0416%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="7"/><text x="0.2500%" y="463.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="0.0000%" y="437" width="0.0416%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="7"/><text x="0.2500%" y="447.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="0.0000%" y="421" width="0.0416%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="7"/><text x="0.2500%" y="431.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="0.0000%" y="405" width="0.0416%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="7"/><text x="0.2500%" y="415.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="0.0000%" y="389" width="0.0416%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="7"/><text x="0.2500%" y="399.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="0.0000%" y="373" width="0.0416%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="7"/><text x="0.2500%" y="383.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="0.0000%" y="357" width="0.0416%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="7"/><text x="0.2500%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="0.0416%" y="597" width="0.0119%" height="15" fill="rgb(210,31,41)" fg:x="7" fg:w="2"/><text x="0.2916%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="0.2613%" y="341" width="0.0178%" height="15" fill="rgb(221,200,47)" fg:x="44" fg:w="3"/><text x="0.5113%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="0.2613%" y="325" width="0.0178%" height="15" fill="rgb(226,26,5)" fg:x="44" fg:w="3"/><text x="0.5113%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="0.2672%" y="309" width="0.0119%" height="15" fill="rgb(249,33,26)" fg:x="45" fg:w="2"/><text x="0.5172%" y="319.50"></text></g><g><title>core::cmp::PartialOrd::gt (2 samples, 0.01%)</title><rect x="0.2791%" y="341" width="0.0119%" height="15" fill="rgb(235,183,28)" fg:x="47" fg:w="2"/><text x="0.5291%" y="351.50"></text></g><g><title>&lt;poker_eval_rs::handval::HandVal as core::cmp::PartialOrd&gt;::partial_cmp (2 samples, 0.01%)</title><rect x="0.2791%" y="325" width="0.0119%" height="15" fill="rgb(221,5,38)" fg:x="47" fg:w="2"/><text x="0.5291%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::partial_cmp (2 samples, 0.01%)</title><rect x="0.2791%" y="309" width="0.0119%" height="15" fill="rgb(247,18,42)" fg:x="47" fg:w="2"/><text x="0.5291%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u32&gt;::cmp (2 samples, 0.01%)</title><rect x="0.2791%" y="293" width="0.0119%" height="15" fill="rgb(241,131,45)" fg:x="47" fg:w="2"/><text x="0.5291%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (41 samples, 0.24%)</title><rect x="2.5178%" y="309" width="0.2435%" height="15" fill="rgb(249,31,29)" fg:x="424" fg:w="41"/><text x="2.7678%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (41 samples, 0.24%)</title><rect x="2.5178%" y="293" width="0.2435%" height="15" fill="rgb(225,111,53)" fg:x="424" fg:w="41"/><text x="2.7678%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (41 samples, 0.24%)</title><rect x="2.5178%" y="277" width="0.2435%" height="15" fill="rgb(238,160,17)" fg:x="424" fg:w="41"/><text x="2.7678%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (7 samples, 0.04%)</title><rect x="2.7672%" y="309" width="0.0416%" height="15" fill="rgb(214,148,48)" fg:x="466" fg:w="7"/><text x="3.0172%" y="319.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.03%)</title><rect x="3.3492%" y="261" width="0.0297%" height="15" fill="rgb(232,36,49)" fg:x="564" fg:w="5"/><text x="3.5992%" y="271.50"></text></g><g><title>__GI___libc_malloc (26 samples, 0.15%)</title><rect x="3.3848%" y="245" width="0.1544%" height="15" fill="rgb(209,103,24)" fg:x="570" fg:w="26"/><text x="3.6348%" y="255.50"></text></g><g><title>tcache_get (8 samples, 0.05%)</title><rect x="3.4917%" y="229" width="0.0475%" height="15" fill="rgb(229,88,8)" fg:x="588" fg:w="8"/><text x="3.7417%" y="239.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h955962b5a7d70a33E.llvm.12112595345845222332 (31 samples, 0.18%)</title><rect x="3.3789%" y="261" width="0.1841%" height="15" fill="rgb(213,181,19)" fg:x="569" fg:w="31"/><text x="3.6289%" y="271.50"></text></g><g><title>__rust_alloc (3 samples, 0.02%)</title><rect x="3.5451%" y="245" width="0.0178%" height="15" fill="rgb(254,191,54)" fg:x="597" fg:w="3"/><text x="3.7951%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (6 samples, 0.04%)</title><rect x="3.5629%" y="261" width="0.0356%" height="15" fill="rgb(241,83,37)" fg:x="600" fg:w="6"/><text x="3.8129%" y="271.50"></text></g><g><title>__memmove_avx_unaligned (10 samples, 0.06%)</title><rect x="3.7886%" y="165" width="0.0594%" height="15" fill="rgb(233,36,39)" fg:x="638" fg:w="10"/><text x="4.0386%" y="175.50"></text></g><g><title>_int_free (7 samples, 0.04%)</title><rect x="3.8480%" y="165" width="0.0416%" height="15" fill="rgb(226,3,54)" fg:x="648" fg:w="7"/><text x="4.0980%" y="175.50"></text></g><g><title>_int_realloc (45 samples, 0.27%)</title><rect x="3.6936%" y="181" width="0.2672%" height="15" fill="rgb(245,192,40)" fg:x="622" fg:w="45"/><text x="3.9436%" y="191.50"></text></g><g><title>_int_malloc (12 samples, 0.07%)</title><rect x="3.8895%" y="165" width="0.0713%" height="15" fill="rgb(238,167,29)" fg:x="655" fg:w="12"/><text x="4.1395%" y="175.50"></text></g><g><title>checked_request2size (2 samples, 0.01%)</title><rect x="3.9489%" y="149" width="0.0119%" height="15" fill="rgb(232,182,51)" fg:x="665" fg:w="2"/><text x="4.1989%" y="159.50"></text></g><g><title>__GI___libc_realloc (55 samples, 0.33%)</title><rect x="3.6461%" y="197" width="0.3266%" height="15" fill="rgb(231,60,39)" fg:x="614" fg:w="55"/><text x="3.8961%" y="207.50"></text></g><g><title>checked_request2size (2 samples, 0.01%)</title><rect x="3.9608%" y="181" width="0.0119%" height="15" fill="rgb(208,69,12)" fg:x="667" fg:w="2"/><text x="4.2108%" y="191.50"></text></g><g><title>__rdl_realloc (6 samples, 0.04%)</title><rect x="3.9727%" y="197" width="0.0356%" height="15" fill="rgb(235,93,37)" fg:x="669" fg:w="6"/><text x="4.2227%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (72 samples, 0.43%)</title><rect x="3.5986%" y="261" width="0.4276%" height="15" fill="rgb(213,116,39)" fg:x="606" fg:w="72"/><text x="3.8486%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (64 samples, 0.38%)</title><rect x="3.6461%" y="245" width="0.3800%" height="15" fill="rgb(222,207,29)" fg:x="614" fg:w="64"/><text x="3.8961%" y="255.50"></text></g><g><title>alloc::alloc::Global::grow_impl (64 samples, 0.38%)</title><rect x="3.6461%" y="229" width="0.3800%" height="15" fill="rgb(206,96,30)" fg:x="614" fg:w="64"/><text x="3.8961%" y="239.50"></text></g><g><title>alloc::alloc::realloc (64 samples, 0.38%)</title><rect x="3.6461%" y="213" width="0.3800%" height="15" fill="rgb(218,138,4)" fg:x="614" fg:w="64"/><text x="3.8961%" y="223.50"></text></g><g><title>__rust_realloc (3 samples, 0.02%)</title><rect x="4.0083%" y="197" width="0.0178%" height="15" fill="rgb(250,191,14)" fg:x="675" fg:w="3"/><text x="4.2583%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::array (6 samples, 0.04%)</title><rect x="4.0261%" y="261" width="0.0356%" height="15" fill="rgb(239,60,40)" fg:x="678" fg:w="6"/><text x="4.2761%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (6 samples, 0.04%)</title><rect x="4.0261%" y="245" width="0.0356%" height="15" fill="rgb(206,27,48)" fg:x="678" fg:w="6"/><text x="4.2761%" y="255.50"></text></g><g><title>core::cmp::max (4 samples, 0.02%)</title><rect x="4.0618%" y="261" width="0.0238%" height="15" fill="rgb(225,35,8)" fg:x="684" fg:w="4"/><text x="4.3118%" y="271.50"></text></g><g><title>core::cmp::Ord::max (4 samples, 0.02%)</title><rect x="4.0618%" y="245" width="0.0238%" height="15" fill="rgb(250,213,24)" fg:x="684" fg:w="4"/><text x="4.3118%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.02%)</title><rect x="4.0618%" y="229" width="0.0238%" height="15" fill="rgb(247,123,22)" fg:x="684" fg:w="4"/><text x="4.3118%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (137 samples, 0.81%)</title><rect x="3.3135%" y="277" width="0.8135%" height="15" fill="rgb(231,138,38)" fg:x="558" fg:w="137"/><text x="3.5635%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (7 samples, 0.04%)</title><rect x="4.0855%" y="261" width="0.0416%" height="15" fill="rgb(231,145,46)" fg:x="688" fg:w="7"/><text x="4.3355%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (7 samples, 0.04%)</title><rect x="4.0855%" y="245" width="0.0416%" height="15" fill="rgb(251,118,11)" fg:x="688" fg:w="7"/><text x="4.3355%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (139 samples, 0.83%)</title><rect x="3.3076%" y="293" width="0.8254%" height="15" fill="rgb(217,147,25)" fg:x="557" fg:w="139"/><text x="3.5576%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (237 samples, 1.41%)</title><rect x="2.8088%" y="309" width="1.4074%" height="15" fill="rgb(247,81,37)" fg:x="473" fg:w="237"/><text x="3.0588%" y="319.50"></text></g><g><title>core::ptr::write (14 samples, 0.08%)</title><rect x="4.1330%" y="293" width="0.0831%" height="15" fill="rgb(209,12,38)" fg:x="696" fg:w="14"/><text x="4.3830%" y="303.50"></text></g><g><title>core::cmp::PartialEq::ne (2 samples, 0.01%)</title><rect x="4.2221%" y="309" width="0.0119%" height="15" fill="rgb(227,1,9)" fg:x="711" fg:w="2"/><text x="4.4721%" y="319.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="4.2221%" y="293" width="0.0119%" height="15" fill="rgb(248,47,43)" fg:x="711" fg:w="2"/><text x="4.4721%" y="303.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="4.2221%" y="277" width="0.0119%" height="15" fill="rgb(221,10,30)" fg:x="711" fg:w="2"/><text x="4.4721%" y="287.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (38 samples, 0.23%)</title><rect x="4.7150%" y="277" width="0.2257%" height="15" fill="rgb(210,229,1)" fg:x="794" fg:w="38"/><text x="4.9650%" y="287.50"></text></g><g><title>poker_eval_rs::eval_omaha::std_deck_omaha_hi_low8_eval (38 samples, 0.23%)</title><rect x="4.7150%" y="261" width="0.2257%" height="15" fill="rgb(222,148,37)" fg:x="794" fg:w="38"/><text x="4.9650%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (262 samples, 1.56%)</title><rect x="4.2340%" y="293" width="1.5558%" height="15" fill="rgb(234,67,33)" fg:x="713" fg:w="262"/><text x="4.4840%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (143 samples, 0.85%)</title><rect x="4.9406%" y="277" width="0.8492%" height="15" fill="rgb(247,98,35)" fg:x="832" fg:w="143"/><text x="5.1906%" y="287.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (324 samples, 1.92%)</title><rect x="4.2340%" y="309" width="1.9240%" height="15" fill="rgb(247,138,52)" fg:x="713" fg:w="324"/><text x="4.4840%" y="319.50">c..</text></g><g><title>poker_eval_rs::eval_omaha::std_deck_omaha_hi_low8_eval (62 samples, 0.37%)</title><rect x="5.7898%" y="293" width="0.3682%" height="15" fill="rgb(213,79,30)" fg:x="975" fg:w="62"/><text x="6.0398%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="6.1461%" y="277" width="0.0119%" height="15" fill="rgb(246,177,23)" fg:x="1035" fg:w="2"/><text x="6.3961%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="6.1461%" y="261" width="0.0119%" height="15" fill="rgb(230,62,27)" fg:x="1035" fg:w="2"/><text x="6.3961%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="6.1461%" y="245" width="0.0119%" height="15" fill="rgb(216,154,8)" fg:x="1035" fg:w="2"/><text x="6.3961%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="6.1461%" y="229" width="0.0119%" height="15" fill="rgb(244,35,45)" fg:x="1035" fg:w="2"/><text x="6.3961%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="6.1461%" y="213" width="0.0119%" height="15" fill="rgb(251,115,12)" fg:x="1035" fg:w="2"/><text x="6.3961%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="6.1461%" y="197" width="0.0119%" height="15" fill="rgb(240,54,50)" fg:x="1035" fg:w="2"/><text x="6.3961%" y="207.50"></text></g><g><title>__GI___libc_free (37 samples, 0.22%)</title><rect x="6.1580%" y="229" width="0.2197%" height="15" fill="rgb(233,84,52)" fg:x="1037" fg:w="37"/><text x="6.4080%" y="239.50"></text></g><g><title>_int_free (22 samples, 0.13%)</title><rect x="6.2470%" y="213" width="0.1306%" height="15" fill="rgb(207,117,47)" fg:x="1052" fg:w="22"/><text x="6.4970%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (40 samples, 0.24%)</title><rect x="6.1580%" y="261" width="0.2375%" height="15" fill="rgb(249,43,39)" fg:x="1037" fg:w="40"/><text x="6.4080%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (40 samples, 0.24%)</title><rect x="6.1580%" y="245" width="0.2375%" height="15" fill="rgb(209,38,44)" fg:x="1037" fg:w="40"/><text x="6.4080%" y="255.50"></text></g><g><title>__rust_dealloc (3 samples, 0.02%)</title><rect x="6.3777%" y="229" width="0.0178%" height="15" fill="rgb(236,212,23)" fg:x="1074" fg:w="3"/><text x="6.6277%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;poker_eval_rs::t_cardmasks::StdDeckCardMask&gt;&gt; (48 samples, 0.29%)</title><rect x="6.1580%" y="309" width="0.2850%" height="15" fill="rgb(242,79,21)" fg:x="1037" fg:w="48"/><text x="6.4080%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;poker_eval_rs::t_cardmasks::StdDeckCardMask&gt;&gt; (48 samples, 0.29%)</title><rect x="6.1580%" y="293" width="0.2850%" height="15" fill="rgb(211,96,35)" fg:x="1037" fg:w="48"/><text x="6.4080%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 0.29%)</title><rect x="6.1580%" y="277" width="0.2850%" height="15" fill="rgb(253,215,40)" fg:x="1037" fg:w="48"/><text x="6.4080%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (8 samples, 0.05%)</title><rect x="6.3955%" y="261" width="0.0475%" height="15" fill="rgb(211,81,21)" fg:x="1077" fg:w="8"/><text x="6.6455%" y="271.50"></text></g><g><title>poker_eval_rs::deck_std::&lt;impl poker_eval_rs::t_cardmasks::StdDeckCardMask&gt;::card_is_set (35 samples, 0.21%)</title><rect x="6.4430%" y="309" width="0.2078%" height="15" fill="rgb(208,190,38)" fg:x="1085" fg:w="35"/><text x="6.6930%" y="319.50"></text></g><g><title>poker_eval_rs::deck_std::&lt;impl poker_eval_rs::t_cardmasks::StdDeckCardMask&gt;::new (34 samples, 0.20%)</title><rect x="6.6508%" y="309" width="0.2019%" height="15" fill="rgb(235,213,38)" fg:x="1120" fg:w="34"/><text x="6.9008%" y="319.50"></text></g><g><title>poker_eval_rs::deck_std::&lt;impl poker_eval_rs::t_cardmasks::StdDeckCardMask&gt;::or (293 samples, 1.74%)</title><rect x="6.8527%" y="309" width="1.7399%" height="15" fill="rgb(237,122,38)" fg:x="1154" fg:w="293"/><text x="7.1027%" y="319.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="8.5570%" y="293" width="0.0356%" height="15" fill="rgb(244,218,35)" fg:x="1441" fg:w="6"/><text x="8.8070%" y="303.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="8.5570%" y="277" width="0.0356%" height="15" fill="rgb(240,68,47)" fg:x="1441" fg:w="6"/><text x="8.8070%" y="287.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="8.5570%" y="261" width="0.0356%" height="15" fill="rgb(210,16,53)" fg:x="1441" fg:w="6"/><text x="8.8070%" y="271.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="8.5570%" y="245" width="0.0356%" height="15" fill="rgb(235,124,12)" fg:x="1441" fg:w="6"/><text x="8.8070%" y="255.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="8.5570%" y="229" width="0.0356%" height="15" fill="rgb(224,169,11)" fg:x="1441" fg:w="6"/><text x="8.8070%" y="239.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="8.5570%" y="213" width="0.0356%" height="15" fill="rgb(250,166,2)" fg:x="1441" fg:w="6"/><text x="8.8070%" y="223.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="8.5570%" y="197" width="0.0356%" height="15" fill="rgb(242,216,29)" fg:x="1441" fg:w="6"/><text x="8.8070%" y="207.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="8.5570%" y="181" width="0.0356%" height="15" fill="rgb(230,116,27)" fg:x="1441" fg:w="6"/><text x="8.8070%" y="191.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="8.5570%" y="165" width="0.0356%" height="15" fill="rgb(228,99,48)" fg:x="1441" fg:w="6"/><text x="8.8070%" y="175.50"></text></g><g><title>core::cmp::Ord::max (4 samples, 0.02%)</title><rect x="12.4822%" y="293" width="0.0238%" height="15" fill="rgb(253,11,6)" fg:x="2102" fg:w="4"/><text x="12.7322%" y="303.50"></text></g><g><title>poker_eval_rs::eval::Eval::eval_n (4 samples, 0.02%)</title><rect x="12.4822%" y="277" width="0.0238%" height="15" fill="rgb(247,143,39)" fg:x="2102" fg:w="4"/><text x="12.7322%" y="287.50"></text></g><g><title>poker_eval_rs::deck_std::&lt;impl poker_eval_rs::t_cardmasks::StdDeckCardMask&gt;::clubs (10 samples, 0.06%)</title><rect x="12.5059%" y="293" width="0.0594%" height="15" fill="rgb(236,97,10)" fg:x="2106" fg:w="10"/><text x="12.7559%" y="303.50"></text></g><g><title>poker_eval_rs::deck_std::&lt;impl poker_eval_rs::t_cardmasks::StdDeckCardMask&gt;::diamonds (17 samples, 0.10%)</title><rect x="12.5653%" y="293" width="0.1010%" height="15" fill="rgb(233,208,19)" fg:x="2116" fg:w="17"/><text x="12.8153%" y="303.50"></text></g><g><title>poker_eval_rs::deck_std::&lt;impl poker_eval_rs::t_cardmasks::StdDeckCardMask&gt;::hearts (23 samples, 0.14%)</title><rect x="12.6663%" y="293" width="0.1366%" height="15" fill="rgb(216,164,2)" fg:x="2133" fg:w="23"/><text x="12.9163%" y="303.50"></text></g><g><title>poker_eval_rs::deck_std::&lt;impl poker_eval_rs::t_cardmasks::StdDeckCardMask&gt;::spades (258 samples, 1.53%)</title><rect x="12.8029%" y="293" width="1.5321%" height="15" fill="rgb(220,129,5)" fg:x="2156" fg:w="258"/><text x="13.0529%" y="303.50"></text></g><g><title>poker_eval_rs::eval::Eval::eval_n (18 samples, 0.11%)</title><rect x="14.3349%" y="293" width="0.1069%" height="15" fill="rgb(242,17,10)" fg:x="2414" fg:w="18"/><text x="14.5849%" y="303.50"></text></g><g><title>&lt;i32 as core::iter::range::Step&gt;::backward_unchecked (102 samples, 0.61%)</title><rect x="19.9644%" y="229" width="0.6057%" height="15" fill="rgb(242,107,0)" fg:x="3362" fg:w="102"/><text x="20.2144%" y="239.50"></text></g><g><title>core::num::&lt;impl i32&gt;::unchecked_sub (102 samples, 0.61%)</title><rect x="19.9644%" y="213" width="0.6057%" height="15" fill="rgb(251,28,31)" fg:x="3362" fg:w="102"/><text x="20.2144%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (635 samples, 3.77%)</title><rect x="19.3884%" y="277" width="3.7708%" height="15" fill="rgb(233,223,10)" fg:x="3265" fg:w="635"/><text x="19.6384%" y="287.50">&lt;cor..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (635 samples, 3.77%)</title><rect x="19.3884%" y="261" width="3.7708%" height="15" fill="rgb(215,21,27)" fg:x="3265" fg:w="635"/><text x="19.6384%" y="271.50">core..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (635 samples, 3.77%)</title><rect x="19.3884%" y="245" width="3.7708%" height="15" fill="rgb(232,23,21)" fg:x="3265" fg:w="635"/><text x="19.6384%" y="255.50">&lt;cor..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (436 samples, 2.59%)</title><rect x="20.5701%" y="229" width="2.5891%" height="15" fill="rgb(244,5,23)" fg:x="3464" fg:w="436"/><text x="20.8201%" y="239.50">co..</text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="23.1591%" y="277" width="0.0178%" height="15" fill="rgb(226,81,46)" fg:x="3900" fg:w="3"/><text x="23.4091%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="23.1651%" y="261" width="0.0119%" height="15" fill="rgb(247,70,30)" fg:x="3901" fg:w="2"/><text x="23.4151%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="23.1651%" y="245" width="0.0119%" height="15" fill="rgb(212,68,19)" fg:x="3901" fg:w="2"/><text x="23.4151%" y="255.50"></text></g><g><title>[unknown] (8 samples, 0.05%)</title><rect x="32.1734%" y="261" width="0.0475%" height="15" fill="rgb(240,187,13)" fg:x="5418" fg:w="8"/><text x="32.4234%" y="271.50"></text></g><g><title>[unknown] (8 samples, 0.05%)</title><rect x="32.1734%" y="245" width="0.0475%" height="15" fill="rgb(223,113,26)" fg:x="5418" fg:w="8"/><text x="32.4234%" y="255.50"></text></g><g><title>[unknown] (8 samples, 0.05%)</title><rect x="32.1734%" y="229" width="0.0475%" height="15" fill="rgb(206,192,2)" fg:x="5418" fg:w="8"/><text x="32.4234%" y="239.50"></text></g><g><title>[unknown] (8 samples, 0.05%)</title><rect x="32.1734%" y="213" width="0.0475%" height="15" fill="rgb(241,108,4)" fg:x="5418" fg:w="8"/><text x="32.4234%" y="223.50"></text></g><g><title>[unknown] (8 samples, 0.05%)</title><rect x="32.1734%" y="197" width="0.0475%" height="15" fill="rgb(247,173,49)" fg:x="5418" fg:w="8"/><text x="32.4234%" y="207.50"></text></g><g><title>[unknown] (8 samples, 0.05%)</title><rect x="32.1734%" y="181" width="0.0475%" height="15" fill="rgb(224,114,35)" fg:x="5418" fg:w="8"/><text x="32.4234%" y="191.50"></text></g><g><title>[unknown] (8 samples, 0.05%)</title><rect x="32.1734%" y="165" width="0.0475%" height="15" fill="rgb(245,159,27)" fg:x="5418" fg:w="8"/><text x="32.4234%" y="175.50"></text></g><g><title>[unknown] (8 samples, 0.05%)</title><rect x="32.1734%" y="149" width="0.0475%" height="15" fill="rgb(245,172,44)" fg:x="5418" fg:w="8"/><text x="32.4234%" y="159.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="32.1793%" y="133" width="0.0416%" height="15" fill="rgb(236,23,11)" fg:x="5419" fg:w="7"/><text x="32.4293%" y="143.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="32.1793%" y="117" width="0.0416%" height="15" fill="rgb(205,117,38)" fg:x="5419" fg:w="7"/><text x="32.4293%" y="127.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="32.1793%" y="101" width="0.0416%" height="15" fill="rgb(237,72,25)" fg:x="5419" fg:w="7"/><text x="32.4293%" y="111.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (29 samples, 0.17%)</title><rect x="32.6544%" y="229" width="0.1722%" height="15" fill="rgb(244,70,9)" fg:x="5499" fg:w="29"/><text x="32.9044%" y="239.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="35.7245%" y="197" width="0.0356%" height="15" fill="rgb(217,125,39)" fg:x="6016" fg:w="6"/><text x="35.9745%" y="207.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="35.7245%" y="181" width="0.0356%" height="15" fill="rgb(235,36,10)" fg:x="6016" fg:w="6"/><text x="35.9745%" y="191.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="35.7245%" y="165" width="0.0356%" height="15" fill="rgb(251,123,47)" fg:x="6016" fg:w="6"/><text x="35.9745%" y="175.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="35.7245%" y="149" width="0.0356%" height="15" fill="rgb(221,13,13)" fg:x="6016" fg:w="6"/><text x="35.9745%" y="159.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="35.7245%" y="133" width="0.0356%" height="15" fill="rgb(238,131,9)" fg:x="6016" fg:w="6"/><text x="35.9745%" y="143.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="35.7245%" y="117" width="0.0356%" height="15" fill="rgb(211,50,8)" fg:x="6016" fg:w="6"/><text x="35.9745%" y="127.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="35.7245%" y="101" width="0.0356%" height="15" fill="rgb(245,182,24)" fg:x="6016" fg:w="6"/><text x="35.9745%" y="111.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="35.7245%" y="85" width="0.0356%" height="15" fill="rgb(242,14,37)" fg:x="6016" fg:w="6"/><text x="35.9745%" y="95.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="35.7245%" y="69" width="0.0356%" height="15" fill="rgb(246,228,12)" fg:x="6016" fg:w="6"/><text x="35.9745%" y="79.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="35.7245%" y="53" width="0.0356%" height="15" fill="rgb(213,55,15)" fg:x="6016" fg:w="6"/><text x="35.9745%" y="63.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="35.7245%" y="37" width="0.0356%" height="15" fill="rgb(209,9,3)" fg:x="6016" fg:w="6"/><text x="35.9745%" y="47.50"></text></g><g><title>checked_request2size (26 samples, 0.15%)</title><rect x="35.7601%" y="197" width="0.1544%" height="15" fill="rgb(230,59,30)" fg:x="6022" fg:w="26"/><text x="36.0101%" y="207.50"></text></g><g><title>__GI___libc_malloc (611 samples, 3.63%)</title><rect x="33.1829%" y="213" width="3.6283%" height="15" fill="rgb(209,121,21)" fg:x="5588" fg:w="611"/><text x="33.4329%" y="223.50">__GI..</text></g><g><title>tcache_get (151 samples, 0.90%)</title><rect x="35.9145%" y="197" width="0.8967%" height="15" fill="rgb(220,109,13)" fg:x="6048" fg:w="151"/><text x="36.1645%" y="207.50"></text></g><g><title>__rdl_alloc (34 samples, 0.20%)</title><rect x="36.8112%" y="213" width="0.2019%" height="15" fill="rgb(232,18,1)" fg:x="6199" fg:w="34"/><text x="37.0612%" y="223.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h955962b5a7d70a33E.llvm.12112595345845222332 (814 samples, 4.83%)</title><rect x="32.8266%" y="229" width="4.8337%" height="15" fill="rgb(215,41,42)" fg:x="5528" fg:w="814"/><text x="33.0766%" y="239.50">_ZN5al..</text></g><g><title>__rust_alloc (109 samples, 0.65%)</title><rect x="37.0131%" y="213" width="0.6473%" height="15" fill="rgb(224,123,36)" fg:x="6233" fg:w="109"/><text x="37.2631%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (20 samples, 0.12%)</title><rect x="37.6603%" y="229" width="0.1188%" height="15" fill="rgb(240,125,3)" fg:x="6342" fg:w="20"/><text x="37.9103%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (11 samples, 0.07%)</title><rect x="37.7791%" y="229" width="0.0653%" height="15" fill="rgb(205,98,50)" fg:x="6362" fg:w="11"/><text x="38.0291%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (186 samples, 1.10%)</title><rect x="37.8444%" y="229" width="1.1045%" height="15" fill="rgb(205,185,37)" fg:x="6373" fg:w="186"/><text x="38.0944%" y="239.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (96 samples, 0.57%)</title><rect x="38.3789%" y="213" width="0.5701%" height="15" fill="rgb(238,207,15)" fg:x="6463" fg:w="96"/><text x="38.6289%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::array (63 samples, 0.37%)</title><rect x="38.9489%" y="229" width="0.3741%" height="15" fill="rgb(213,199,42)" fg:x="6559" fg:w="63"/><text x="39.1989%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (63 samples, 0.37%)</title><rect x="38.9489%" y="213" width="0.3741%" height="15" fill="rgb(235,201,11)" fg:x="6559" fg:w="63"/><text x="39.1989%" y="223.50"></text></g><g><title>core::cmp::max (88 samples, 0.52%)</title><rect x="39.3230%" y="229" width="0.5226%" height="15" fill="rgb(207,46,11)" fg:x="6622" fg:w="88"/><text x="39.5730%" y="239.50"></text></g><g><title>core::cmp::Ord::max (88 samples, 0.52%)</title><rect x="39.3230%" y="213" width="0.5226%" height="15" fill="rgb(241,35,35)" fg:x="6622" fg:w="88"/><text x="39.5730%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (88 samples, 0.52%)</title><rect x="39.3230%" y="197" width="0.5226%" height="15" fill="rgb(243,32,47)" fg:x="6622" fg:w="88"/><text x="39.5730%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,324 samples, 7.86%)</title><rect x="32.2209%" y="261" width="7.8622%" height="15" fill="rgb(247,202,23)" fg:x="5426" fg:w="1324"/><text x="32.4709%" y="271.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,302 samples, 7.73%)</title><rect x="32.3515%" y="245" width="7.7316%" height="15" fill="rgb(219,102,11)" fg:x="5448" fg:w="1302"/><text x="32.6015%" y="255.50">alloc::raw_..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (40 samples, 0.24%)</title><rect x="39.8456%" y="229" width="0.2375%" height="15" fill="rgb(243,110,44)" fg:x="6710" fg:w="40"/><text x="40.0956%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (40 samples, 0.24%)</title><rect x="39.8456%" y="213" width="0.2375%" height="15" fill="rgb(222,74,54)" fg:x="6710" fg:w="40"/><text x="40.0956%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (26 samples, 0.15%)</title><rect x="40.0831%" y="261" width="0.1544%" height="15" fill="rgb(216,99,12)" fg:x="6750" fg:w="26"/><text x="40.3331%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (26 samples, 0.15%)</title><rect x="40.0831%" y="245" width="0.1544%" height="15" fill="rgb(226,22,26)" fg:x="6750" fg:w="26"/><text x="40.3331%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,205 samples, 19.03%)</title><rect x="23.1770%" y="277" width="19.0321%" height="15" fill="rgb(217,163,10)" fg:x="3903" fg:w="3205"/><text x="23.4270%" y="287.50">alloc::vec::Vec&lt;T,A&gt;::push</text></g><g><title>core::ptr::write (332 samples, 1.97%)</title><rect x="40.2375%" y="261" width="1.9715%" height="15" fill="rgb(213,25,53)" fg:x="6776" fg:w="332"/><text x="40.4875%" y="271.50">c..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (47 samples, 0.28%)</title><rect x="42.2090%" y="277" width="0.2791%" height="15" fill="rgb(252,105,26)" fg:x="7108" fg:w="47"/><text x="42.4590%" y="287.50"></text></g><g><title>_int_free (512 samples, 3.04%)</title><rect x="44.0261%" y="181" width="3.0404%" height="15" fill="rgb(220,39,43)" fg:x="7414" fg:w="512"/><text x="44.2761%" y="191.50">_in..</text></g><g><title>tcache_put (44 samples, 0.26%)</title><rect x="46.8052%" y="165" width="0.2613%" height="15" fill="rgb(229,68,48)" fg:x="7882" fg:w="44"/><text x="47.0552%" y="175.50"></text></g><g><title>__GI___libc_free (745 samples, 4.42%)</title><rect x="42.6603%" y="197" width="4.4240%" height="15" fill="rgb(252,8,32)" fg:x="7184" fg:w="745"/><text x="42.9103%" y="207.50">__GI_..</text></g><g><title>arena_for_chunk (3 samples, 0.02%)</title><rect x="47.0665%" y="181" width="0.0178%" height="15" fill="rgb(223,20,43)" fg:x="7926" fg:w="3"/><text x="47.3165%" y="191.50"></text></g><g><title>__rdl_dealloc (28 samples, 0.17%)</title><rect x="47.0843%" y="197" width="0.1663%" height="15" fill="rgb(229,81,49)" fg:x="7929" fg:w="28"/><text x="47.3343%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (804 samples, 4.77%)</title><rect x="42.6603%" y="229" width="4.7743%" height="15" fill="rgb(236,28,36)" fg:x="7184" fg:w="804"/><text x="42.9103%" y="239.50">&lt;alloc..</text></g><g><title>alloc::alloc::dealloc (804 samples, 4.77%)</title><rect x="42.6603%" y="213" width="4.7743%" height="15" fill="rgb(249,185,26)" fg:x="7184" fg:w="804"/><text x="42.9103%" y="223.50">alloc:..</text></g><g><title>__rust_dealloc (31 samples, 0.18%)</title><rect x="47.2506%" y="197" width="0.1841%" height="15" fill="rgb(249,174,33)" fg:x="7957" fg:w="31"/><text x="47.5006%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (920 samples, 5.46%)</title><rect x="42.4881%" y="277" width="5.4632%" height="15" fill="rgb(233,201,37)" fg:x="7155" fg:w="920"/><text x="42.7381%" y="287.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (920 samples, 5.46%)</title><rect x="42.4881%" y="261" width="5.4632%" height="15" fill="rgb(221,78,26)" fg:x="7155" fg:w="920"/><text x="42.7381%" y="271.50">core::p..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (920 samples, 5.46%)</title><rect x="42.4881%" y="245" width="5.4632%" height="15" fill="rgb(250,127,30)" fg:x="7155" fg:w="920"/><text x="42.7381%" y="255.50">&lt;alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (87 samples, 0.52%)</title><rect x="47.4347%" y="229" width="0.5166%" height="15" fill="rgb(230,49,44)" fg:x="7988" fg:w="87"/><text x="47.6847%" y="239.50"></text></g><g><title>poker_eval_rs::eval::Eval::extract_top_five_cards (5,660 samples, 33.61%)</title><rect x="14.4418%" y="293" width="33.6105%" height="15" fill="rgb(229,67,23)" fg:x="2432" fg:w="5660"/><text x="14.6918%" y="303.50">poker_eval_rs::eval::Eval::extract_top_five_cards</text></g><g><title>poker_eval_rs::eval::Eval::extract_top_five_cards (17 samples, 0.10%)</title><rect x="47.9513%" y="277" width="0.1010%" height="15" fill="rgb(249,83,47)" fg:x="8075" fg:w="17"/><text x="48.2013%" y="287.50"></text></g><g><title>poker_eval_rs::eval::Eval::eval_n (6,788 samples, 40.31%)</title><rect x="8.5926%" y="309" width="40.3088%" height="15" fill="rgb(215,43,3)" fg:x="1447" fg:w="6788"/><text x="8.8426%" y="319.50">poker_eval_rs::eval::Eval::eval_n</text></g><g><title>poker_eval_rs::handval::HandVal::new (143 samples, 0.85%)</title><rect x="48.0523%" y="293" width="0.8492%" height="15" fill="rgb(238,154,13)" fg:x="8092" fg:w="143"/><text x="48.3023%" y="303.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="48.8658%" y="277" width="0.0356%" height="15" fill="rgb(219,56,2)" fg:x="8229" fg:w="6"/><text x="49.1158%" y="287.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="48.8658%" y="261" width="0.0356%" height="15" fill="rgb(233,0,4)" fg:x="8229" fg:w="6"/><text x="49.1158%" y="271.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="48.8658%" y="245" width="0.0356%" height="15" fill="rgb(235,30,7)" fg:x="8229" fg:w="6"/><text x="49.1158%" y="255.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="48.8658%" y="229" width="0.0356%" height="15" fill="rgb(250,79,13)" fg:x="8229" fg:w="6"/><text x="49.1158%" y="239.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="48.8658%" y="213" width="0.0356%" height="15" fill="rgb(211,146,34)" fg:x="8229" fg:w="6"/><text x="49.1158%" y="223.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="48.8658%" y="197" width="0.0356%" height="15" fill="rgb(228,22,38)" fg:x="8229" fg:w="6"/><text x="49.1158%" y="207.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="48.8658%" y="181" width="0.0356%" height="15" fill="rgb(235,168,5)" fg:x="8229" fg:w="6"/><text x="49.1158%" y="191.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="48.8658%" y="165" width="0.0356%" height="15" fill="rgb(221,155,16)" fg:x="8229" fg:w="6"/><text x="49.1158%" y="175.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="48.8658%" y="149" width="0.0356%" height="15" fill="rgb(215,215,53)" fg:x="8229" fg:w="6"/><text x="49.1158%" y="159.50"></text></g><g><title>poker_eval_rs::eval_low8::std_deck_lowball8_eval (316 samples, 1.88%)</title><rect x="48.9014%" y="309" width="1.8765%" height="15" fill="rgb(223,4,10)" fg:x="8235" fg:w="316"/><text x="49.1514%" y="319.50">p..</text></g><g><title>poker_eval_rs::handval_low::LowHandVal::rotate_ranks (51 samples, 0.30%)</title><rect x="50.4751%" y="293" width="0.3029%" height="15" fill="rgb(234,103,6)" fg:x="8500" fg:w="51"/><text x="50.7251%" y="303.50"></text></g><g><title>poker_eval_rs::enumerate::&lt;impl poker_eval_rs::enumdefs::EnumResult&gt;::update_omaha_statistics (8,549 samples, 50.77%)</title><rect x="0.0950%" y="357" width="50.7660%" height="15" fill="rgb(227,97,0)" fg:x="16" fg:w="8549"/><text x="0.3450%" y="367.50">poker_eval_rs::enumerate::&lt;impl poker_eval_rs::enumdefs::EnumResult&gt;::update_omaha_s..</text></g><g><title>poker_eval_rs::eval_omaha::std_deck_omaha_hi_eval (8,516 samples, 50.57%)</title><rect x="0.2910%" y="341" width="50.5701%" height="15" fill="rgb(234,150,53)" fg:x="49" fg:w="8516"/><text x="0.5410%" y="351.50">poker_eval_rs::eval_omaha::std_deck_omaha_hi_eval</text></g><g><title>poker_eval_rs::eval_omaha::std_deck_omaha_hi_low8_eval (8,516 samples, 50.57%)</title><rect x="0.2910%" y="325" width="50.5701%" height="15" fill="rgb(228,201,54)" fg:x="49" fg:w="8516"/><text x="0.5410%" y="335.50">poker_eval_rs::eval_omaha::std_deck_omaha_hi_low8_eval</text></g><g><title>poker_eval_rs::eval_omaha::std_deck_omaha_hi_low8_eval (14 samples, 0.08%)</title><rect x="50.7779%" y="309" width="0.0831%" height="15" fill="rgb(222,22,37)" fg:x="8551" fg:w="14"/><text x="51.0279%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (41 samples, 0.24%)</title><rect x="53.0701%" y="341" width="0.2435%" height="15" fill="rgb(237,53,32)" fg:x="8937" fg:w="41"/><text x="53.3201%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (41 samples, 0.24%)</title><rect x="53.0701%" y="325" width="0.2435%" height="15" fill="rgb(233,25,53)" fg:x="8937" fg:w="41"/><text x="53.3201%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (41 samples, 0.24%)</title><rect x="53.0701%" y="309" width="0.2435%" height="15" fill="rgb(210,40,34)" fg:x="8937" fg:w="41"/><text x="53.3201%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (5 samples, 0.03%)</title><rect x="53.3135%" y="341" width="0.0297%" height="15" fill="rgb(241,220,44)" fg:x="8978" fg:w="5"/><text x="53.5635%" y="351.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (7 samples, 0.04%)</title><rect x="53.7589%" y="293" width="0.0416%" height="15" fill="rgb(235,28,35)" fg:x="9053" fg:w="7"/><text x="54.0089%" y="303.50"></text></g><g><title>__GI___libc_malloc (24 samples, 0.14%)</title><rect x="53.8064%" y="277" width="0.1425%" height="15" fill="rgb(210,56,17)" fg:x="9061" fg:w="24"/><text x="54.0564%" y="287.50"></text></g><g><title>tcache_get (4 samples, 0.02%)</title><rect x="53.9252%" y="261" width="0.0238%" height="15" fill="rgb(224,130,29)" fg:x="9081" fg:w="4"/><text x="54.1752%" y="271.50"></text></g><g><title>__rdl_alloc (2 samples, 0.01%)</title><rect x="53.9489%" y="277" width="0.0119%" height="15" fill="rgb(235,212,8)" fg:x="9085" fg:w="2"/><text x="54.1989%" y="287.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h955962b5a7d70a33E.llvm.12112595345845222332 (33 samples, 0.20%)</title><rect x="53.8005%" y="293" width="0.1960%" height="15" fill="rgb(223,33,50)" fg:x="9060" fg:w="33"/><text x="54.0505%" y="303.50"></text></g><g><title>__rust_alloc (6 samples, 0.04%)</title><rect x="53.9608%" y="277" width="0.0356%" height="15" fill="rgb(219,149,13)" fg:x="9087" fg:w="6"/><text x="54.2108%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.02%)</title><rect x="53.9964%" y="293" width="0.0238%" height="15" fill="rgb(250,156,29)" fg:x="9093" fg:w="4"/><text x="54.2464%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (2 samples, 0.01%)</title><rect x="54.0202%" y="293" width="0.0119%" height="15" fill="rgb(216,193,19)" fg:x="9097" fg:w="2"/><text x="54.2702%" y="303.50"></text></g><g><title>__memmove_avx_unaligned (2 samples, 0.01%)</title><rect x="54.2399%" y="197" width="0.0119%" height="15" fill="rgb(216,135,14)" fg:x="9134" fg:w="2"/><text x="54.4899%" y="207.50"></text></g><g><title>_int_free (5 samples, 0.03%)</title><rect x="54.2518%" y="197" width="0.0297%" height="15" fill="rgb(241,47,5)" fg:x="9136" fg:w="5"/><text x="54.5018%" y="207.50"></text></g><g><title>tcache_put (2 samples, 0.01%)</title><rect x="54.2696%" y="181" width="0.0119%" height="15" fill="rgb(233,42,35)" fg:x="9139" fg:w="2"/><text x="54.5196%" y="191.50"></text></g><g><title>__GI___libc_realloc (44 samples, 0.26%)</title><rect x="54.1152%" y="229" width="0.2613%" height="15" fill="rgb(231,13,6)" fg:x="9113" fg:w="44"/><text x="54.3652%" y="239.50"></text></g><g><title>_int_realloc (38 samples, 0.23%)</title><rect x="54.1508%" y="213" width="0.2257%" height="15" fill="rgb(207,181,40)" fg:x="9119" fg:w="38"/><text x="54.4008%" y="223.50"></text></g><g><title>_int_malloc (16 samples, 0.10%)</title><rect x="54.2815%" y="197" width="0.0950%" height="15" fill="rgb(254,173,49)" fg:x="9141" fg:w="16"/><text x="54.5315%" y="207.50"></text></g><g><title>__rdl_realloc (2 samples, 0.01%)</title><rect x="54.3765%" y="229" width="0.0119%" height="15" fill="rgb(221,1,38)" fg:x="9157" fg:w="2"/><text x="54.6265%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (51 samples, 0.30%)</title><rect x="54.1152%" y="277" width="0.3029%" height="15" fill="rgb(206,124,46)" fg:x="9113" fg:w="51"/><text x="54.3652%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (51 samples, 0.30%)</title><rect x="54.1152%" y="261" width="0.3029%" height="15" fill="rgb(249,21,11)" fg:x="9113" fg:w="51"/><text x="54.3652%" y="271.50"></text></g><g><title>alloc::alloc::realloc (51 samples, 0.30%)</title><rect x="54.1152%" y="245" width="0.3029%" height="15" fill="rgb(222,201,40)" fg:x="9113" fg:w="51"/><text x="54.3652%" y="255.50"></text></g><g><title>__rust_realloc (5 samples, 0.03%)</title><rect x="54.3884%" y="229" width="0.0297%" height="15" fill="rgb(235,61,29)" fg:x="9159" fg:w="5"/><text x="54.6384%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (67 samples, 0.40%)</title><rect x="54.0321%" y="293" width="0.3979%" height="15" fill="rgb(219,207,3)" fg:x="9099" fg:w="67"/><text x="54.2821%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.01%)</title><rect x="54.4181%" y="277" width="0.0119%" height="15" fill="rgb(222,56,46)" fg:x="9164" fg:w="2"/><text x="54.6681%" y="287.50"></text></g><g><title>core::alloc::layout::Layout::array (5 samples, 0.03%)</title><rect x="54.4299%" y="293" width="0.0297%" height="15" fill="rgb(239,76,54)" fg:x="9166" fg:w="5"/><text x="54.6799%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (5 samples, 0.03%)</title><rect x="54.4299%" y="277" width="0.0297%" height="15" fill="rgb(231,124,27)" fg:x="9166" fg:w="5"/><text x="54.6799%" y="287.50"></text></g><g><title>core::cmp::max (6 samples, 0.04%)</title><rect x="54.4596%" y="293" width="0.0356%" height="15" fill="rgb(249,195,6)" fg:x="9171" fg:w="6"/><text x="54.7096%" y="303.50"></text></g><g><title>core::cmp::Ord::max (6 samples, 0.04%)</title><rect x="54.4596%" y="277" width="0.0356%" height="15" fill="rgb(237,174,47)" fg:x="9171" fg:w="6"/><text x="54.7096%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.04%)</title><rect x="54.4596%" y="261" width="0.0356%" height="15" fill="rgb(206,201,31)" fg:x="9171" fg:w="6"/><text x="54.7096%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (134 samples, 0.80%)</title><rect x="53.7352%" y="309" width="0.7957%" height="15" fill="rgb(231,57,52)" fg:x="9049" fg:w="134"/><text x="53.9852%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (6 samples, 0.04%)</title><rect x="54.4952%" y="293" width="0.0356%" height="15" fill="rgb(248,177,22)" fg:x="9177" fg:w="6"/><text x="54.7452%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (6 samples, 0.04%)</title><rect x="54.4952%" y="277" width="0.0356%" height="15" fill="rgb(215,211,37)" fg:x="9177" fg:w="6"/><text x="54.7452%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (137 samples, 0.81%)</title><rect x="53.7352%" y="325" width="0.8135%" height="15" fill="rgb(241,128,51)" fg:x="9049" fg:w="137"/><text x="53.9852%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.02%)</title><rect x="54.5309%" y="309" width="0.0178%" height="15" fill="rgb(227,165,31)" fg:x="9183" fg:w="3"/><text x="54.7809%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (224 samples, 1.33%)</title><rect x="53.3432%" y="341" width="1.3302%" height="15" fill="rgb(228,167,24)" fg:x="8983" fg:w="224"/><text x="53.5932%" y="351.50"></text></g><g><title>core::ptr::write (20 samples, 0.12%)</title><rect x="54.5546%" y="325" width="0.1188%" height="15" fill="rgb(228,143,12)" fg:x="9187" fg:w="20"/><text x="54.8046%" y="335.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (27 samples, 0.16%)</title><rect x="55.1663%" y="309" width="0.1603%" height="15" fill="rgb(249,149,8)" fg:x="9290" fg:w="27"/><text x="55.4163%" y="319.50"></text></g><g><title>poker_eval_rs::eval_omaha::std_deck_omaha_hi_low8_eval (26 samples, 0.15%)</title><rect x="55.1722%" y="293" width="0.1544%" height="15" fill="rgb(243,35,44)" fg:x="9291" fg:w="26"/><text x="55.4222%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (244 samples, 1.45%)</title><rect x="54.6734%" y="325" width="1.4489%" height="15" fill="rgb(246,89,9)" fg:x="9207" fg:w="244"/><text x="54.9234%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (134 samples, 0.80%)</title><rect x="55.3266%" y="309" width="0.7957%" height="15" fill="rgb(233,213,13)" fg:x="9317" fg:w="134"/><text x="55.5766%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (290 samples, 1.72%)</title><rect x="54.6734%" y="341" width="1.7221%" height="15" fill="rgb(233,141,41)" fg:x="9207" fg:w="290"/><text x="54.9234%" y="351.50"></text></g><g><title>poker_eval_rs::eval_omaha::std_deck_omaha_hi_low8_eval (46 samples, 0.27%)</title><rect x="56.1223%" y="325" width="0.2732%" height="15" fill="rgb(239,167,4)" fg:x="9451" fg:w="46"/><text x="56.3723%" y="335.50"></text></g><g><title>__GI___libc_free (45 samples, 0.27%)</title><rect x="56.3955%" y="261" width="0.2672%" height="15" fill="rgb(209,217,16)" fg:x="9497" fg:w="45"/><text x="56.6455%" y="271.50"></text></g><g><title>_int_free (25 samples, 0.15%)</title><rect x="56.5143%" y="245" width="0.1485%" height="15" fill="rgb(219,88,35)" fg:x="9517" fg:w="25"/><text x="56.7643%" y="255.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.02%)</title><rect x="56.6627%" y="261" width="0.0238%" height="15" fill="rgb(220,193,23)" fg:x="9542" fg:w="4"/><text x="56.9127%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (56 samples, 0.33%)</title><rect x="56.3955%" y="293" width="0.3325%" height="15" fill="rgb(230,90,52)" fg:x="9497" fg:w="56"/><text x="56.6455%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (56 samples, 0.33%)</title><rect x="56.3955%" y="277" width="0.3325%" height="15" fill="rgb(252,106,19)" fg:x="9497" fg:w="56"/><text x="56.6455%" y="287.50"></text></g><g><title>__rust_dealloc (7 samples, 0.04%)</title><rect x="56.6865%" y="261" width="0.0416%" height="15" fill="rgb(206,74,20)" fg:x="9546" fg:w="7"/><text x="56.9365%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;poker_eval_rs::t_cardmasks::StdDeckCardMask&gt;&gt; (63 samples, 0.37%)</title><rect x="56.3955%" y="341" width="0.3741%" height="15" fill="rgb(230,138,44)" fg:x="9497" fg:w="63"/><text x="56.6455%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;poker_eval_rs::t_cardmasks::StdDeckCardMask&gt;&gt; (63 samples, 0.37%)</title><rect x="56.3955%" y="325" width="0.3741%" height="15" fill="rgb(235,182,43)" fg:x="9497" fg:w="63"/><text x="56.6455%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.37%)</title><rect x="56.3955%" y="309" width="0.3741%" height="15" fill="rgb(242,16,51)" fg:x="9497" fg:w="63"/><text x="56.6455%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (7 samples, 0.04%)</title><rect x="56.7280%" y="293" width="0.0416%" height="15" fill="rgb(248,9,4)" fg:x="9553" fg:w="7"/><text x="56.9780%" y="303.50"></text></g><g><title>poker_eval_rs::deck_std::&lt;impl poker_eval_rs::t_cardmasks::StdDeckCardMask&gt;::card_is_set (27 samples, 0.16%)</title><rect x="56.7696%" y="341" width="0.1603%" height="15" fill="rgb(210,31,22)" fg:x="9560" fg:w="27"/><text x="57.0196%" y="351.50"></text></g><g><title>poker_eval_rs::deck_std::&lt;impl poker_eval_rs::t_cardmasks::StdDeckCardMask&gt;::new (14 samples, 0.08%)</title><rect x="56.9299%" y="341" width="0.0831%" height="15" fill="rgb(239,54,39)" fg:x="9587" fg:w="14"/><text x="57.1799%" y="351.50"></text></g><g><title>poker_eval_rs::deck_std::&lt;impl poker_eval_rs::t_cardmasks::StdDeckCardMask&gt;::or (282 samples, 1.67%)</title><rect x="57.0131%" y="341" width="1.6746%" height="15" fill="rgb(230,99,41)" fg:x="9601" fg:w="282"/><text x="57.2631%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="62.6425%" y="325" width="0.0119%" height="15" fill="rgb(253,106,12)" fg:x="10549" fg:w="2"/><text x="62.8925%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="62.6425%" y="309" width="0.0119%" height="15" fill="rgb(213,46,41)" fg:x="10549" fg:w="2"/><text x="62.8925%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="62.6425%" y="293" width="0.0119%" height="15" fill="rgb(215,133,35)" fg:x="10549" fg:w="2"/><text x="62.8925%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="62.6425%" y="277" width="0.0119%" height="15" fill="rgb(213,28,5)" fg:x="10549" fg:w="2"/><text x="62.8925%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="62.6425%" y="261" width="0.0119%" height="15" fill="rgb(215,77,49)" fg:x="10549" fg:w="2"/><text x="62.8925%" y="271.50"></text></g><g><title>poker_eval_rs::deck_std::&lt;impl poker_eval_rs::t_cardmasks::StdDeckCardMask&gt;::clubs (18 samples, 0.11%)</title><rect x="62.6544%" y="325" width="0.1069%" height="15" fill="rgb(248,100,22)" fg:x="10551" fg:w="18"/><text x="62.9044%" y="335.50"></text></g><g><title>poker_eval_rs::deck_std::&lt;impl poker_eval_rs::t_cardmasks::StdDeckCardMask&gt;::diamonds (20 samples, 0.12%)</title><rect x="62.7613%" y="325" width="0.1188%" height="15" fill="rgb(208,67,9)" fg:x="10569" fg:w="20"/><text x="63.0113%" y="335.50"></text></g><g><title>poker_eval_rs::deck_std::&lt;impl poker_eval_rs::t_cardmasks::StdDeckCardMask&gt;::hearts (31 samples, 0.18%)</title><rect x="62.8800%" y="325" width="0.1841%" height="15" fill="rgb(219,133,21)" fg:x="10589" fg:w="31"/><text x="63.1300%" y="335.50"></text></g><g><title>poker_eval_rs::deck_std::&lt;impl poker_eval_rs::t_cardmasks::StdDeckCardMask&gt;::spades (301 samples, 1.79%)</title><rect x="63.0641%" y="325" width="1.7874%" height="15" fill="rgb(246,46,29)" fg:x="10620" fg:w="301"/><text x="63.3141%" y="335.50">p..</text></g><g><title>poker_eval_rs::eval::Eval::eval_n (25 samples, 0.15%)</title><rect x="64.8515%" y="325" width="0.1485%" height="15" fill="rgb(246,185,52)" fg:x="10921" fg:w="25"/><text x="65.1015%" y="335.50"></text></g><g><title>&lt;i32 as core::iter::range::Step&gt;::backward_unchecked (113 samples, 0.67%)</title><rect x="69.7387%" y="261" width="0.6710%" height="15" fill="rgb(252,136,11)" fg:x="11744" fg:w="113"/><text x="69.9887%" y="271.50"></text></g><g><title>core::num::&lt;impl i32&gt;::unchecked_sub (113 samples, 0.67%)</title><rect x="69.7387%" y="245" width="0.6710%" height="15" fill="rgb(219,138,53)" fg:x="11744" fg:w="113"/><text x="69.9887%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (610 samples, 3.62%)</title><rect x="69.2458%" y="309" width="3.6223%" height="15" fill="rgb(211,51,23)" fg:x="11661" fg:w="610"/><text x="69.4958%" y="319.50">&lt;cor..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (610 samples, 3.62%)</title><rect x="69.2458%" y="293" width="3.6223%" height="15" fill="rgb(247,221,28)" fg:x="11661" fg:w="610"/><text x="69.4958%" y="303.50">core..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (610 samples, 3.62%)</title><rect x="69.2458%" y="277" width="3.6223%" height="15" fill="rgb(251,222,45)" fg:x="11661" fg:w="610"/><text x="69.4958%" y="287.50">&lt;cor..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (414 samples, 2.46%)</title><rect x="70.4097%" y="261" width="2.4584%" height="15" fill="rgb(217,162,53)" fg:x="11857" fg:w="414"/><text x="70.6597%" y="271.50">co..</text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="72.8682%" y="309" width="0.0119%" height="15" fill="rgb(229,93,14)" fg:x="12271" fg:w="2"/><text x="73.1182%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="72.8682%" y="293" width="0.0119%" height="15" fill="rgb(209,67,49)" fg:x="12271" fg:w="2"/><text x="73.1182%" y="303.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="80.8432%" y="293" width="0.0416%" height="15" fill="rgb(213,87,29)" fg:x="13614" fg:w="7"/><text x="81.0932%" y="303.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="80.8432%" y="277" width="0.0416%" height="15" fill="rgb(205,151,52)" fg:x="13614" fg:w="7"/><text x="81.0932%" y="287.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="80.8432%" y="261" width="0.0416%" height="15" fill="rgb(253,215,39)" fg:x="13614" fg:w="7"/><text x="81.0932%" y="271.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="80.8432%" y="245" width="0.0416%" height="15" fill="rgb(221,220,41)" fg:x="13614" fg:w="7"/><text x="81.0932%" y="255.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="80.8432%" y="229" width="0.0416%" height="15" fill="rgb(218,133,21)" fg:x="13614" fg:w="7"/><text x="81.0932%" y="239.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="80.8432%" y="213" width="0.0416%" height="15" fill="rgb(221,193,43)" fg:x="13614" fg:w="7"/><text x="81.0932%" y="223.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="80.8432%" y="197" width="0.0416%" height="15" fill="rgb(240,128,52)" fg:x="13614" fg:w="7"/><text x="81.0932%" y="207.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="80.8432%" y="181" width="0.0416%" height="15" fill="rgb(253,114,12)" fg:x="13614" fg:w="7"/><text x="81.0932%" y="191.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="80.8432%" y="165" width="0.0416%" height="15" fill="rgb(215,223,47)" fg:x="13614" fg:w="7"/><text x="81.0932%" y="175.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="80.8432%" y="149" width="0.0416%" height="15" fill="rgb(248,225,23)" fg:x="13614" fg:w="7"/><text x="81.0932%" y="159.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="80.8432%" y="133" width="0.0416%" height="15" fill="rgb(250,108,0)" fg:x="13614" fg:w="7"/><text x="81.0932%" y="143.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="80.8432%" y="117" width="0.0416%" height="15" fill="rgb(228,208,7)" fg:x="13614" fg:w="7"/><text x="81.0932%" y="127.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (41 samples, 0.24%)</title><rect x="81.4252%" y="261" width="0.2435%" height="15" fill="rgb(244,45,10)" fg:x="13712" fg:w="41"/><text x="81.6752%" y="271.50"></text></g><g><title>checked_request2size (35 samples, 0.21%)</title><rect x="84.4062%" y="229" width="0.2078%" height="15" fill="rgb(207,125,25)" fg:x="14214" fg:w="35"/><text x="84.6562%" y="239.50"></text></g><g><title>__GI___libc_malloc (590 samples, 3.50%)</title><rect x="82.0843%" y="245" width="3.5036%" height="15" fill="rgb(210,195,18)" fg:x="13823" fg:w="590"/><text x="82.3343%" y="255.50">__G..</text></g><g><title>tcache_get (164 samples, 0.97%)</title><rect x="84.6140%" y="229" width="0.9739%" height="15" fill="rgb(249,80,12)" fg:x="14249" fg:w="164"/><text x="84.8640%" y="239.50"></text></g><g><title>__rdl_alloc (39 samples, 0.23%)</title><rect x="85.5879%" y="245" width="0.2316%" height="15" fill="rgb(221,65,9)" fg:x="14413" fg:w="39"/><text x="85.8379%" y="255.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h955962b5a7d70a33E.llvm.12112595345845222332 (814 samples, 4.83%)</title><rect x="81.6686%" y="261" width="4.8337%" height="15" fill="rgb(235,49,36)" fg:x="13753" fg:w="814"/><text x="81.9186%" y="271.50">_ZN5al..</text></g><g><title>__rust_alloc (115 samples, 0.68%)</title><rect x="85.8195%" y="245" width="0.6829%" height="15" fill="rgb(225,32,20)" fg:x="14452" fg:w="115"/><text x="86.0695%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (12 samples, 0.07%)</title><rect x="86.5024%" y="261" width="0.0713%" height="15" fill="rgb(215,141,46)" fg:x="14567" fg:w="12"/><text x="86.7524%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (7 samples, 0.04%)</title><rect x="86.5736%" y="261" width="0.0416%" height="15" fill="rgb(250,160,47)" fg:x="14579" fg:w="7"/><text x="86.8236%" y="271.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="87.1675%" y="245" width="0.0416%" height="15" fill="rgb(216,222,40)" fg:x="14679" fg:w="7"/><text x="87.4175%" y="255.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="87.1675%" y="229" width="0.0416%" height="15" fill="rgb(234,217,39)" fg:x="14679" fg:w="7"/><text x="87.4175%" y="239.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="87.1675%" y="213" width="0.0416%" height="15" fill="rgb(207,178,40)" fg:x="14679" fg:w="7"/><text x="87.4175%" y="223.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="87.1675%" y="197" width="0.0416%" height="15" fill="rgb(221,136,13)" fg:x="14679" fg:w="7"/><text x="87.4175%" y="207.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="87.1675%" y="181" width="0.0416%" height="15" fill="rgb(249,199,10)" fg:x="14679" fg:w="7"/><text x="87.4175%" y="191.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="87.1675%" y="165" width="0.0416%" height="15" fill="rgb(249,222,13)" fg:x="14679" fg:w="7"/><text x="87.4175%" y="175.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="87.1675%" y="149" width="0.0416%" height="15" fill="rgb(244,185,38)" fg:x="14679" fg:w="7"/><text x="87.4175%" y="159.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="87.1675%" y="133" width="0.0416%" height="15" fill="rgb(236,202,9)" fg:x="14679" fg:w="7"/><text x="87.4175%" y="143.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="87.1675%" y="117" width="0.0416%" height="15" fill="rgb(250,229,37)" fg:x="14679" fg:w="7"/><text x="87.4175%" y="127.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="87.1675%" y="101" width="0.0416%" height="15" fill="rgb(206,174,23)" fg:x="14679" fg:w="7"/><text x="87.4175%" y="111.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="87.1675%" y="85" width="0.0416%" height="15" fill="rgb(211,33,43)" fg:x="14679" fg:w="7"/><text x="87.4175%" y="95.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="87.1675%" y="69" width="0.0416%" height="15" fill="rgb(245,58,50)" fg:x="14679" fg:w="7"/><text x="87.4175%" y="79.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h955962b5a7d70a33E.llvm.12112595345845222332 (2 samples, 0.01%)</title><rect x="87.2090%" y="245" width="0.0119%" height="15" fill="rgb(244,68,36)" fg:x="14686" fg:w="2"/><text x="87.4590%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (208 samples, 1.24%)</title><rect x="86.6152%" y="261" width="1.2352%" height="15" fill="rgb(232,229,15)" fg:x="14586" fg:w="208"/><text x="86.8652%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (106 samples, 0.63%)</title><rect x="87.2209%" y="245" width="0.6295%" height="15" fill="rgb(254,30,23)" fg:x="14688" fg:w="106"/><text x="87.4709%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::array (51 samples, 0.30%)</title><rect x="87.8504%" y="261" width="0.3029%" height="15" fill="rgb(235,160,14)" fg:x="14794" fg:w="51"/><text x="88.1004%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (51 samples, 0.30%)</title><rect x="87.8504%" y="245" width="0.3029%" height="15" fill="rgb(212,155,44)" fg:x="14794" fg:w="51"/><text x="88.1004%" y="255.50"></text></g><g><title>core::cmp::max (89 samples, 0.53%)</title><rect x="88.1532%" y="261" width="0.5285%" height="15" fill="rgb(226,2,50)" fg:x="14845" fg:w="89"/><text x="88.4032%" y="271.50"></text></g><g><title>core::cmp::Ord::max (89 samples, 0.53%)</title><rect x="88.1532%" y="245" width="0.5285%" height="15" fill="rgb(234,177,6)" fg:x="14845" fg:w="89"/><text x="88.4032%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (89 samples, 0.53%)</title><rect x="88.1532%" y="229" width="0.5285%" height="15" fill="rgb(217,24,9)" fg:x="14845" fg:w="89"/><text x="88.4032%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,312 samples, 7.79%)</title><rect x="81.0570%" y="277" width="7.7910%" height="15" fill="rgb(220,13,46)" fg:x="13650" fg:w="1312"/><text x="81.3070%" y="287.50">alloc::raw_..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (28 samples, 0.17%)</title><rect x="88.6817%" y="261" width="0.1663%" height="15" fill="rgb(239,221,27)" fg:x="14934" fg:w="28"/><text x="88.9317%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (28 samples, 0.17%)</title><rect x="88.6817%" y="245" width="0.1663%" height="15" fill="rgb(222,198,25)" fg:x="14934" fg:w="28"/><text x="88.9317%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,344 samples, 7.98%)</title><rect x="80.8848%" y="293" width="7.9810%" height="15" fill="rgb(211,99,13)" fg:x="13621" fg:w="1344"/><text x="81.1348%" y="303.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.02%)</title><rect x="88.8480%" y="277" width="0.0178%" height="15" fill="rgb(232,111,31)" fg:x="14962" fg:w="3"/><text x="89.0980%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (34 samples, 0.20%)</title><rect x="88.8658%" y="293" width="0.2019%" height="15" fill="rgb(245,82,37)" fg:x="14965" fg:w="34"/><text x="89.1158%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (34 samples, 0.20%)</title><rect x="88.8658%" y="277" width="0.2019%" height="15" fill="rgb(227,149,46)" fg:x="14965" fg:w="34"/><text x="89.1158%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,052 samples, 18.12%)</title><rect x="72.8800%" y="309" width="18.1235%" height="15" fill="rgb(218,36,50)" fg:x="12273" fg:w="3052"/><text x="73.1300%" y="319.50">alloc::vec::Vec&lt;T,A&gt;::push</text></g><g><title>core::ptr::write (326 samples, 1.94%)</title><rect x="89.0677%" y="293" width="1.9359%" height="15" fill="rgb(226,80,48)" fg:x="14999" fg:w="326"/><text x="89.3177%" y="303.50">c..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (58 samples, 0.34%)</title><rect x="91.0036%" y="309" width="0.3444%" height="15" fill="rgb(238,224,15)" fg:x="15325" fg:w="58"/><text x="91.2536%" y="319.50"></text></g><g><title>_int_free (523 samples, 3.11%)</title><rect x="92.9929%" y="213" width="3.1057%" height="15" fill="rgb(241,136,10)" fg:x="15660" fg:w="523"/><text x="93.2429%" y="223.50">_in..</text></g><g><title>tcache_put (75 samples, 0.45%)</title><rect x="95.6532%" y="197" width="0.4454%" height="15" fill="rgb(208,32,45)" fg:x="16108" fg:w="75"/><text x="95.9032%" y="207.50"></text></g><g><title>__GI___libc_free (781 samples, 4.64%)</title><rect x="91.4964%" y="229" width="4.6378%" height="15" fill="rgb(207,135,9)" fg:x="15408" fg:w="781"/><text x="91.7464%" y="239.50">__GI_..</text></g><g><title>arena_for_chunk (6 samples, 0.04%)</title><rect x="96.0986%" y="213" width="0.0356%" height="15" fill="rgb(206,86,44)" fg:x="16183" fg:w="6"/><text x="96.3486%" y="223.50"></text></g><g><title>__rdl_dealloc (35 samples, 0.21%)</title><rect x="96.1342%" y="229" width="0.2078%" height="15" fill="rgb(245,177,15)" fg:x="16189" fg:w="35"/><text x="96.3842%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (869 samples, 5.16%)</title><rect x="91.4964%" y="261" width="5.1603%" height="15" fill="rgb(206,64,50)" fg:x="15408" fg:w="869"/><text x="91.7464%" y="271.50">&lt;alloc..</text></g><g><title>alloc::alloc::dealloc (869 samples, 5.16%)</title><rect x="91.4964%" y="245" width="5.1603%" height="15" fill="rgb(234,36,40)" fg:x="15408" fg:w="869"/><text x="91.7464%" y="255.50">alloc:..</text></g><g><title>__rust_dealloc (53 samples, 0.31%)</title><rect x="96.3420%" y="229" width="0.3147%" height="15" fill="rgb(213,64,8)" fg:x="16224" fg:w="53"/><text x="96.5920%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (989 samples, 5.87%)</title><rect x="91.3480%" y="309" width="5.8729%" height="15" fill="rgb(210,75,36)" fg:x="15383" fg:w="989"/><text x="91.5980%" y="319.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (989 samples, 5.87%)</title><rect x="91.3480%" y="293" width="5.8729%" height="15" fill="rgb(229,88,21)" fg:x="15383" fg:w="989"/><text x="91.5980%" y="303.50">core::p..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (989 samples, 5.87%)</title><rect x="91.3480%" y="277" width="5.8729%" height="15" fill="rgb(252,204,47)" fg:x="15383" fg:w="989"/><text x="91.5980%" y="287.50">&lt;alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (95 samples, 0.56%)</title><rect x="96.6568%" y="261" width="0.5641%" height="15" fill="rgb(208,77,27)" fg:x="16277" fg:w="95"/><text x="96.9068%" y="271.50"></text></g><g><title>poker_eval_rs::eval::Eval::extract_top_five_cards (5,447 samples, 32.35%)</title><rect x="65.0000%" y="325" width="32.3456%" height="15" fill="rgb(221,76,26)" fg:x="10946" fg:w="5447"/><text x="65.2500%" y="335.50">poker_eval_rs::eval::Eval::extract_top_five_cards</text></g><g><title>poker_eval_rs::eval::Eval::extract_top_five_cards (21 samples, 0.12%)</title><rect x="97.2209%" y="309" width="0.1247%" height="15" fill="rgb(225,139,18)" fg:x="16372" fg:w="21"/><text x="97.4709%" y="319.50"></text></g><g><title>poker_eval_rs::eval::Eval::eval_n (6,655 samples, 39.52%)</title><rect x="58.6876%" y="341" width="39.5190%" height="15" fill="rgb(230,137,11)" fg:x="9883" fg:w="6655"/><text x="58.9376%" y="351.50">poker_eval_rs::eval::Eval::eval_n</text></g><g><title>poker_eval_rs::handval::HandVal::new (145 samples, 0.86%)</title><rect x="97.3456%" y="325" width="0.8610%" height="15" fill="rgb(212,28,1)" fg:x="16393" fg:w="145"/><text x="97.5956%" y="335.50"></text></g><g><title>poker_eval_rs::eval_low8::std_deck_lowball8_eval (288 samples, 1.71%)</title><rect x="98.2067%" y="341" width="1.7102%" height="15" fill="rgb(248,164,17)" fg:x="16538" fg:w="288"/><text x="98.4567%" y="351.50"></text></g><g><title>poker_eval_rs::handval_low::LowHandVal::rotate_ranks (62 samples, 0.37%)</title><rect x="99.5487%" y="325" width="0.3682%" height="15" fill="rgb(222,171,42)" fg:x="16764" fg:w="62"/><text x="99.7987%" y="335.50"></text></g><g><title>all (16,840 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(243,84,45)" fg:x="0" fg:w="16840"/><text x="0.2500%" y="639.50"></text></g><g><title>poker_eval_rs (16,833 samples, 99.96%)</title><rect x="0.0416%" y="613" width="99.9584%" height="15" fill="rgb(252,49,23)" fg:x="7" fg:w="16833"/><text x="0.2916%" y="623.50">poker_eval_rs</text></g><g><title>_start (16,831 samples, 99.95%)</title><rect x="0.0534%" y="597" width="99.9466%" height="15" fill="rgb(215,19,7)" fg:x="9" fg:w="16831"/><text x="0.3034%" y="607.50">_start</text></g><g><title>__libc_start_main_impl (16,831 samples, 99.95%)</title><rect x="0.0534%" y="581" width="99.9466%" height="15" fill="rgb(238,81,41)" fg:x="9" fg:w="16831"/><text x="0.3034%" y="591.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (16,831 samples, 99.95%)</title><rect x="0.0534%" y="565" width="99.9466%" height="15" fill="rgb(210,199,37)" fg:x="9" fg:w="16831"/><text x="0.3034%" y="575.50">__libc_start_call_main</text></g><g><title>std::rt::lang_start (16,831 samples, 99.95%)</title><rect x="0.0534%" y="549" width="99.9466%" height="15" fill="rgb(244,192,49)" fg:x="9" fg:w="16831"/><text x="0.3034%" y="559.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (16,831 samples, 99.95%)</title><rect x="0.0534%" y="533" width="99.9466%" height="15" fill="rgb(226,211,11)" fg:x="9" fg:w="16831"/><text x="0.3034%" y="543.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (16,831 samples, 99.95%)</title><rect x="0.0534%" y="517" width="99.9466%" height="15" fill="rgb(236,162,54)" fg:x="9" fg:w="16831"/><text x="0.3034%" y="527.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (16,831 samples, 99.95%)</title><rect x="0.0534%" y="501" width="99.9466%" height="15" fill="rgb(220,229,9)" fg:x="9" fg:w="16831"/><text x="0.3034%" y="511.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (16,831 samples, 99.95%)</title><rect x="0.0534%" y="485" width="99.9466%" height="15" fill="rgb(250,87,22)" fg:x="9" fg:w="16831"/><text x="0.3034%" y="495.50">core::ops::function::FnOnce::call_once</text></g><g><title>poker_eval_rs::main (16,831 samples, 99.95%)</title><rect x="0.0534%" y="469" width="99.9466%" height="15" fill="rgb(239,43,17)" fg:x="9" fg:w="16831"/><text x="0.3034%" y="479.50">poker_eval_rs::main</text></g><g><title>poker_eval_rs::omaha_exhaustive (16,831 samples, 99.95%)</title><rect x="0.0534%" y="453" width="99.9466%" height="15" fill="rgb(231,177,25)" fg:x="9" fg:w="16831"/><text x="0.3034%" y="463.50">poker_eval_rs::omaha_exhaustive</text></g><g><title>poker_eval_rs::enumerate::enum_exhaustive (16,831 samples, 99.95%)</title><rect x="0.0534%" y="437" width="99.9466%" height="15" fill="rgb(219,179,1)" fg:x="9" fg:w="16831"/><text x="0.3034%" y="447.50">poker_eval_rs::enumerate::enum_exhaustive</text></g><g><title>poker_eval_rs::enumerate::&lt;impl poker_eval_rs::enumdefs::EnumResult&gt;::exhaustive_omaha_evaluation (16,831 samples, 99.95%)</title><rect x="0.0534%" y="421" width="99.9466%" height="15" fill="rgb(238,219,53)" fg:x="9" fg:w="16831"/><text x="0.3034%" y="431.50">poker_eval_rs::enumerate::&lt;impl poker_eval_rs::enumdefs::EnumResult&gt;::exhaustive_omaha_evaluation</text></g><g><title>poker_eval_rs::enumerate::enumerate_5_cards_d (16,831 samples, 99.95%)</title><rect x="0.0534%" y="405" width="99.9466%" height="15" fill="rgb(232,167,36)" fg:x="9" fg:w="16831"/><text x="0.3034%" y="415.50">poker_eval_rs::enumerate::enumerate_5_cards_d</text></g><g><title>poker_eval_rs::enumerate::_&lt;impl poker_eval_rs::enumdefs::EnumResult&gt;::exhaustive_omaha_evaluation::_{{closure}} (16,831 samples, 99.95%)</title><rect x="0.0534%" y="389" width="99.9466%" height="15" fill="rgb(244,19,51)" fg:x="9" fg:w="16831"/><text x="0.3034%" y="399.50">poker_eval_rs::enumerate::_&lt;impl poker_eval_rs::enumdefs::EnumResult&gt;::exhaustive_omaha_evaluation::_{{closure}}</text></g><g><title>poker_eval_rs::enumerate::&lt;impl poker_eval_rs::enumdefs::EnumResult&gt;::evaluate_omaha_hands (16,830 samples, 99.94%)</title><rect x="0.0594%" y="373" width="99.9406%" height="15" fill="rgb(224,6,22)" fg:x="10" fg:w="16830"/><text x="0.3094%" y="383.50">poker_eval_rs::enumerate::&lt;impl poker_eval_rs::enumdefs::EnumResult&gt;::evaluate_omaha_hands</text></g><g><title>poker_eval_rs::eval_omaha::std_deck_omaha_hi_low8_eval (8,275 samples, 49.14%)</title><rect x="50.8610%" y="357" width="49.1390%" height="15" fill="rgb(224,145,5)" fg:x="8565" fg:w="8275"/><text x="51.1110%" y="367.50">poker_eval_rs::eval_omaha::std_deck_omaha_hi_low8_eval</text></g><g><title>poker_eval_rs::eval_omaha::std_deck_omaha_hi_low8_eval (14 samples, 0.08%)</title><rect x="99.9169%" y="341" width="0.0831%" height="15" fill="rgb(234,130,49)" fg:x="16826" fg:w="14"/><text x="100.1669%" y="351.50"></text></g></svg></svg>